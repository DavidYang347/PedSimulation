using System;
using System.Collections.Generic;
using System.Drawing;
using System.Threading.Tasks;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Geometry.Delaunay;
using Grasshopper.Kernel.Parameters;
using PedSimulation.Geometry;
using PedSimulation.Properties;
using PedSimulation.RouteGraph;
using PedSimulation.Simulation;
using Rhino.Geometry;
using Edge = PedSimulation.RouteGraph.Edge;

namespace PedSimulation.GHComponents
{
    public class PedSimSystemComponent : GH_Component, IGH_VariableParameterComponent
    {
        public PedSimSystemComponent() : base("PedSimulationSystem", "PedSim", "V0.12.3 2019-06-23\nUpdates since V0.10:\n   V0.12: PersonTemplate plans initial route for people to reuse.   V0.12.1: Obstacle parameters in SystemSettings   V0.12.2: 1. Optional trace output in DeconstructPersonComponent and DeconstructPersonRecordComponent.         Control it in SystemSettings.        2. Graph output no longer optional.   V0.12.3: PersonTemplate info accessible in PostSim", "PedSim", "Engine")
        {
        }

        private Map map { get; set; }

        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBooleanParameter("Reset", "Reset", "", 0);
            pManager.AddGenericParameter("PersonTemplates", "PTemp", "Generated by PersonTemplateComponent. Gates are interpreted from here.", GH_ParamAccess.list);
            pManager.AddCurveParameter("ObstacleCurves", "O", "ObstacleCurves are 1-degree polylines.", GH_ParamAccess.list);
            pManager.AddNumberParameter("Population", "N", "Number of people no the map", 0, 1.0);
            pManager.AddGenericParameter("Targets", "T", "", GH_ParamAccess.list);
            pManager.AddNumberParameter("GenerationTime", "GT", "How long does it take to generate a Person", 0, 1.0);
        }


        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddTextParameter("out", "out", "", 0);
            pManager.AddGenericParameter("People", "People", "A list of 'Person', updated every frame", GH_ParamAccess.list);
            pManager.AddLineParameter("GraphEdges", "Edges", "", GH_ParamAccess.list);
            pManager.AddPointParameter("GraphVertices", "Vertices", "", GH_ParamAccess.list);
            pManager.AddPointParameter("Goal Tag Positions", "GoalPos", "Tag positions for Gates and Targets, for info visualization", GH_ParamAccess.list);
            pManager.AddIntegerParameter("Visit Counts", "Visits", "", GH_ParamAccess.list);
            pManager.AddGenericParameter("Person Records", "Records", "", GH_ParamAccess.list);
        }


        protected override void SolveInstance(IGH_DataAccess DA)
        {
            bool flag = false;
            List<PersonTemplate> list = new List<PersonTemplate>();
            List<Curve> list2 = new List<Curve>();
            double naN = double.NaN;
            List<Target> list3 = new List<Target>();
            string text = "";
            SystemSettings systemSettings = new SystemSettings();
            double num = 0.0;
            bool flag2 = !DA.GetData<bool>("Reset", ref flag);
            if (!flag2)
            {
                bool flag3 = !DA.GetDataList<PersonTemplate>("PersonTemplates", list);
                if (!flag3)
                {
                    bool flag4 = !DA.GetDataList<Curve>("ObstacleCurves", list2);
                    if (!flag4)
                    {
                        bool flag5 = !DA.GetData<double>("Population", ref naN);
                        if (!flag5)
                        {
                            bool flag6 = !DA.GetDataList<Target>("Targets", list3);
                            if (!flag6)
                            {
                                bool flag7 = !DA.GetData<double>("GenerationTime", ref num);
                                if (!flag7)
                                {
                                    bool flag8 = base.Params.Input.Count > this.numParameters;
                                    if (flag8)
                                    {
                                        bool flag9 = !DA.GetData<SystemSettings>("SystemSettings", ref systemSettings);
                                        if (flag9)
                                        {
                                            return;
                                        }
                                    }
                                    int hashCode_PersonTemplates = this.GetHashCode_PersonTemplates(list);
                                    int hashCode_Obstacles = this.GetHashCode_Obstacles(list2);
                                    int hashCode_Targets = this.GetHashCode_Targets(list3);
                                    int num2 = (int)naN;
                                    List<Polyline> list4 = new List<Polyline>();
                                    foreach (Curve curve in list2)
                                    {
                                        Polyline item = new Polyline();
                                        bool flag10 = curve != null && curve.TryGetPolyline(out item);
                                        if (!flag10)
                                        {
                                            throw new ArgumentException("One obstacle curve is an invalid polyline.");
                                        }
                                        list4.Add(item);
                                    }
                                    bool flag11 = flag || this.map == null;
                                    if (flag11)
                                    {
                                        this.CreateNewMap(systemSettings, list, list3, num2, num, list4);
                                        text += "A new map is created!";
                                        this.OutputMessage(DA, text);
                                    }
                                    else
                                    {
                                        bool flag12 = this.lastPopulation != num2;
                                        if (flag12)
                                        {
                                            this.UpdateMapPopulation(num2);
                                            text += "Population updated";
                                        }
                                        bool flag13 = this.lastHash_pTemp != hashCode_PersonTemplates;
                                        if (flag13)
                                        {
                                            this.UpdateMap(list);
                                            text += "PersonTemplates updated";
                                            this.UpdateGateSpecificGraphs();
                                            this.UpdateInitialPath(list);
                                            text += "G-values updated";
                                        }
                                        bool flag14 = this.lastHash_obs != hashCode_Obstacles;
                                        if (flag14)
                                        {
                                            this.UpdateMapObstacles(list4);
                                            text += "ObstacleCurves updated";
                                            this.UpdateGateSpecificGraphs();
                                            this.UpdateInitialPath(list);
                                            text += "G-values updated";
                                        }
                                        bool flag15 = this.lastHash_Targets != hashCode_Targets;
                                        if (flag15)
                                        {
                                            this.UpdateMap(list3);
                                            text += "Targets upadted";
                                        }
                                        bool flag16 = systemSettings != this.lastSettings;
                                        if (flag16)
                                        {
                                            this.UpdateSettings(systemSettings, true);
                                            text += "Settings updated";
                                        }
                                        bool flag17 = this.lastGenerationTime != num;
                                        if (flag17)
                                        {
                                            this.UpdateMapGenerationTime(num);
                                            text += "Generation Time updated.";
                                        }
                                    }
                                    this.map.Recalculate();
                                    text += "The map is recalculated.\n";
                                    this.OutputMessage(DA, text);
                                    DA.SetDataList("People", this.map.People);
                                    DA.SetDataList("GraphEdges", this.GetGraphEdges());
                                    DA.SetDataList("GraphVertices", this.GetGraphVertices());
                                    List<Point3d> list5 = new List<Point3d>();
                                    List<int> list6 = new List<int>();
                                    foreach (Gate gate in this.map.Gates)
                                    {
                                        list5.Add(gate.TagPosition);
                                        list6.Add(gate.GetVisitCount);
                                    }
                                    foreach (Target target in this.map.Targets)
                                    {
                                        list5.Add(target.TagPosition);
                                        list6.Add(target.GetVisitCount);
                                    }
                                    DA.SetDataList("Goal Tag Positions", list5);
                                    DA.SetDataList("Visit Counts", list6);
                                    DA.SetDataList("Person Records", this.map.PersonRecords);
                                    this.lastHash_pTemp = hashCode_PersonTemplates;
                                    this.lastHash_obs = hashCode_Obstacles;
                                    this.lastPopulation = num2;
                                    this.lastHash_Targets = hashCode_Targets;
                                    bool flag18 = systemSettings != this.lastSettings;
                                    if (flag18)
                                    {
                                        this.lastSettings = new SystemSettings(systemSettings);
                                    }
                                    this.lastGenerationTime = num;
                                }
                            }
                        }
                    }
                }
            }
        }

        private int GetHashCode_Targets(List<Target> targets)
        {
            int num = 0;
            foreach (Target target in targets)
            {
                bool flag = target == null;
                if (!flag)
                {
                    int hashCode = target.GetHashCode();
                    num += hashCode;
                }
            }
            return num;
        }

        private int GetHashCode_PersonTemplates(List<PersonTemplate> pTemplates)
        {
            int num = 0;
            foreach (PersonTemplate personTemplate in pTemplates)
            {
                bool flag = personTemplate == null;
                if (!flag)
                {
                    int hashCode = personTemplate.GetHashCode();
                    num += hashCode;
                }
            }
            return num;
        }

        private int GetHashCode_Obstacles(List<Curve> obsCurves)
        {
            int num = 17;
            foreach (Curve c in obsCurves)
            {
                num = num * 23 + this.GetHashCodeForPolyline(c);
            }
            return num;
        }

        private int GetHashCodeForPolyline(Curve c)
        {
            int num = 17;
            Polyline polyline;
            bool flag = c.TryGetPolyline(out polyline);
            int result;
            if (flag)
            {
                foreach (Point3d point3d in polyline)
                {
                    num = num * 23 + point3d.GetHashCode();
                }
                result = num;
            }
            else
            {
                result = c.GetHashCode();
            }
            return result;
        }

        private List<Line> GetGraphEdges()
        {
            List<Line> list = new List<Line>();
            foreach (Edge edge in this.map.CommonGraph.Edges)
            {
                Vec2d position = edge.A.Position;
                Vec2d position2 = edge.B.Position;
                Point3d point3d = new Point3d(position.X, position.Y, 0.0);
                //point3d..ctor(position.X, position.Y, 0.0);
                Point3d point3d2 = new Point3d(position2.X, position2.Y, 0.0);
                //point3d2..ctor(position2.X, position2.Y, 0.0);
                Line item = new Line(point3d, point3d2);
                //item..ctor(point3d, point3d2);
                list.Add(item);
            }
            return list;
        }

        private List<Point3d> GetGraphVertices()
        {
            List<Point3d> list = new List<Point3d>();
            foreach (Vertex vertex in this.map.CommonGraph.Vertices)
            {
                Point3d item = new Point3d(vertex.Position.X, vertex.Position.Y, 0.0);
                //item..ctor(vertex.Position.X, vertex.Position.Y, 0.0);
                list.Add(item);
            }
            return list;
        }

        private void OutputMessage(IGH_DataAccess DA, string message)
        {
            DA.SetData(0, message);
        }

        private void CreateNewMap(SystemSettings mapSettings, List<PersonTemplate> pTemplates, List<Target> targets, int population, double generationTime, List<Polyline> obsPolylines = null)
        {
            this.map = new Map(population, mapSettings);
            this.UpdateMapPopulation(population);
            this.UpdateMapObstacles(obsPolylines);
            this.UpdateMap(pTemplates);
            this.UpdateMap(targets);
            this.UpdateGateSpecificGraphs();
            this.UpdateInitialPath(pTemplates);
            this.UpdateMapGenerationTime(generationTime);
        }

        private void UpdateMapPopulation(int population)
        {
            this.map.Population = population;
        }

        private void UpdateMapGenerationTime(double gt)
        {
            this.map.GenerationTime = gt;
        }

        private void UpdateMap(List<Target> targets)
        {
            foreach (Target target in targets)
            {
                target.Refresh();
            }
            this.map.Targets = targets;
        }

        private void UpdateMapObstacles(List<Polyline> obsPolylines)
        {
            bool flag = obsPolylines == null || obsPolylines.Count == 0;
            if (flag)
            {
                this.map.CommonGraph = GraphGenerator.GenerateEmptyGraph();
            }
            else
            {
                this.map.ObstaclePolylines.Clear();
                foreach (Polyline poly in obsPolylines)
                {
                    Polygon2d polygon2d = new Polygon2d(poly);
                    bool flag2 = polygon2d.IsValid();
                    if (!flag2)
                    {
                        throw new Exception("Some polylines are not closed.");
                    }
                    this.map.ObstaclePolylines.Add(polygon2d);
                }
                this.map.CommonGraph = GraphGenerator.GenerateGraphFromObstacles(this.map.ObstaclePolylines, this.map.Settings.ObstacleOffset);
            }
        }

        private void UpdateMap(List<PersonTemplate> pTemplates)
        {
            this.map.Gates.Clear();
            foreach (PersonTemplate personTemplate in pTemplates)
            {
                bool flag = personTemplate == null;
                if (!flag)
                {
                    Gate startGate = personTemplate.StartGate;
                    Gate destinationGate = personTemplate.DestinationGate;
                    bool flag2 = !this.map.Gates.Contains(startGate);
                    if (flag2)
                    {
                        this.map.Gates.Add(startGate);
                    }
                    bool flag3 = !this.map.Gates.Contains(destinationGate);
                    if (flag3)
                    {
                        this.map.Gates.Add(destinationGate);
                    }
                }
            }
            foreach (Gate gate in this.map.Gates)
            {
                gate.Refresh();
            }
            this.map.PTemplates = pTemplates;
        }

        private void UpdateGateSpecificGraphs()
        {
            this.map.GateSpecGraphs.Clear();
            foreach (Gate gate in this.map.Gates)
            {
                GoalSpecificGraph value = GraphGenerator.GenerateGoalSpecificGraph(this.map.CommonGraph, gate.GetPosition(), this.map.ObstaclePolylines);
                this.map.GateSpecGraphs.Add(gate, value);
            }
        }

        private void UpdateInitialPath(List<PersonTemplate> pTemplates)
        {
            Parallel.ForEach<PersonTemplate>(pTemplates, delegate (PersonTemplate t)
            {
                t.PlanInitialPath(this.map);
            });
        }

        private void UpdateSettings(SystemSettings settings, bool updatePeople)
        {
            bool flag = settings == null;
            if (flag)
            {
                this.map.Settings = new SystemSettings();
            }
            else
            {
                this.map.Settings = settings;
            }
            if (updatePeople)
            {
                for (int i = 0; i < this.map.People.Count; i++)
                {
                    Person person = this.map.People[i];
                    person.DampingRatio = this.map.Settings.DampingRatio;
                    person.FrictionRatio = this.map.Settings.FrictionRatio;
                }
            }
        }

        public bool CanInsertParameter(GH_ParameterSide side, int index)
        {
            bool flag = side == 0;
            bool result;
            if (flag)
            {
                bool flag2 = index == this.numParameters && base.Params.Input.Count <= this.numParameters;
                result = flag2;
            }
            else
            {
                result = false;
            }
            return result;
        }

        public bool CanRemoveParameter(GH_ParameterSide side, int index)
        {
            bool flag = side == 0;
            bool result;
            if (flag)
            {
                bool flag2 = index == this.numParameters;
                result = flag2;
            }
            else
            {
                result = false;
            }
            return result;
        }

        public IGH_Param CreateParameter(GH_ParameterSide side, int index)
        {
            return new Param_GenericObject
            {
                Name = "SystemSettings",
                NickName = "Settings",
                Description = "",
                Access = 0
            };
        }

        public bool DestroyParameter(GH_ParameterSide side, int index)
        {
            this.lastSettings = null;
            return true;
        }

        public void VariableParameterMaintenance()
        {
        }

  
        protected override Bitmap Icon
        {
            get
            {
                return Resources.Icon_PedSimSystem_01;
            }
        }


        public override Guid ComponentGuid
        {
            get
            {
                return new Guid("c599d999-a9bf-42c1-bbe8-05e232bf8b8a");
            }
        }

        private int lastHash_pTemp;

        private int lastHash_obs;

        private int lastPopulation;

        private int lastHash_Targets;

        private SystemSettings lastSettings;

        private double lastGenerationTime;

        private readonly int numParameters = 6;
    }
}

